package minheap

import (
	//"math/rand"
	//    "fmt"
//    "container/heap"
)

type MinHeap []HeapEntry


type HeapEntry interface {
	SetIndex(i int)
	GetIndex() int
	Weight() float64
}


func (mh MinHeap) Len() int{
  return len(mh)
}

func (mh MinHeap) Less(i, j int) bool {
   return compare(mh[i], mh[j]) < 0
}

func (mh MinHeap) Swap(i, j int) {
   mh[i], mh[j] = mh[j] , mh[i]
}

func (mh *MinHeap) Pop() interface{} {
   old  := *mh
   n := len(old)
   x := old[n-1]
   *mh = old[0:n-1]
   return x
}

func (mh *MinHeap) Push(x interface{}) {
   *mh = append(*mh, x.(HeapEntry))
}

func compare(a HeapEntry, b HeapEntry) int8 {
	if a.Weight() > b.Weight() {
		return 1
	} else if a.Weight() == b.Weight() {
		return 0
	} else {
		return -1
	}
}
